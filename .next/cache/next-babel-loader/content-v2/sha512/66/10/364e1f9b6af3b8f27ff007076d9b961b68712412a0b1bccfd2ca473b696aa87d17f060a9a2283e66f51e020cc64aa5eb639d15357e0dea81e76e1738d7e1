{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\";\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\";\nconst breakpoints = createBreakpoints({\n  sm: \"320px\",\n  md: \"768px\",\n  lg: \"960px\",\n  xl: \"1200px\"\n});\nconst extendedTheme = extendTheme({\n  //@ts-ignore\n  breakpoints,\n  fonts: {\n    body: \"Livvic, system-ui, sans-serif\",\n    heading: \"Livvic, system-ui, serif\"\n  }\n});\nexport default function App({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsx(ChakraProvider, {\n    theme: extendedTheme,\n    children: /*#__PURE__*/_jsx(Component, _objectSpread({}, pageProps))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}